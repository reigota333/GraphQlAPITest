// Code generated by Prisma (prisma@1.34.10). DO NOT EDIT.
// Please don't change this file manually but run `prisma generate` to update it.
// For more information, please read the docs: https://www.prisma.io/docs/prisma-client/

import { DocumentNode } from "graphql";
import {
  makePrismaClientClass,
  BaseClientOptions,
  Model
} from "prisma-client-lib";
import { typeDefs } from "./prisma-schema";

export type AtLeastOne<T, U = { [K in keyof T]: Pick<T, K> }> = Partial<T> &
  U[keyof U];

export type Maybe<T> = T | undefined | null;

export interface Exists {
  chatRoom: (where?: ChatRoomWhereInput) => Promise<boolean>;
  club: (where?: ClubWhereInput) => Promise<boolean>;
  friend: (where?: FriendWhereInput) => Promise<boolean>;
  message: (where?: MessageWhereInput) => Promise<boolean>;
  user: (where?: UserWhereInput) => Promise<boolean>;
  userClub: (where?: UserClubWhereInput) => Promise<boolean>;
}

export interface Node {}

export type FragmentableArray<T> = Promise<Array<T>> & Fragmentable;

export interface Fragmentable {
  $fragment<T>(fragment: string | DocumentNode): Promise<T>;
}

export interface Prisma {
  $exists: Exists;
  $graphql: <T = any>(
    query: string,
    variables?: { [key: string]: any }
  ) => Promise<T>;

  /**
   * Queries
   */

  chatRoom: (where: ChatRoomWhereUniqueInput) => ChatRoomNullablePromise;
  chatRooms: (args?: {
    where?: ChatRoomWhereInput;
    orderBy?: ChatRoomOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<ChatRoom>;
  chatRoomsConnection: (args?: {
    where?: ChatRoomWhereInput;
    orderBy?: ChatRoomOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => ChatRoomConnectionPromise;
  club: (where: ClubWhereUniqueInput) => ClubNullablePromise;
  clubs: (args?: {
    where?: ClubWhereInput;
    orderBy?: ClubOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<Club>;
  clubsConnection: (args?: {
    where?: ClubWhereInput;
    orderBy?: ClubOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => ClubConnectionPromise;
  friend: (where: FriendWhereUniqueInput) => FriendNullablePromise;
  friends: (args?: {
    where?: FriendWhereInput;
    orderBy?: FriendOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<Friend>;
  friendsConnection: (args?: {
    where?: FriendWhereInput;
    orderBy?: FriendOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FriendConnectionPromise;
  message: (where: MessageWhereUniqueInput) => MessageNullablePromise;
  messages: (args?: {
    where?: MessageWhereInput;
    orderBy?: MessageOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<Message>;
  messagesConnection: (args?: {
    where?: MessageWhereInput;
    orderBy?: MessageOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => MessageConnectionPromise;
  user: (where: UserWhereUniqueInput) => UserNullablePromise;
  users: (args?: {
    where?: UserWhereInput;
    orderBy?: UserOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<User>;
  usersConnection: (args?: {
    where?: UserWhereInput;
    orderBy?: UserOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => UserConnectionPromise;
  userClub: (where: UserClubWhereUniqueInput) => UserClubNullablePromise;
  userClubs: (args?: {
    where?: UserClubWhereInput;
    orderBy?: UserClubOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<UserClub>;
  userClubsConnection: (args?: {
    where?: UserClubWhereInput;
    orderBy?: UserClubOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => UserClubConnectionPromise;
  node: (args: { id: ID_Output }) => Node;

  /**
   * Mutations
   */

  createChatRoom: (data: ChatRoomCreateInput) => ChatRoomPromise;
  updateChatRoom: (args: {
    data: ChatRoomUpdateInput;
    where: ChatRoomWhereUniqueInput;
  }) => ChatRoomPromise;
  upsertChatRoom: (args: {
    where: ChatRoomWhereUniqueInput;
    create: ChatRoomCreateInput;
    update: ChatRoomUpdateInput;
  }) => ChatRoomPromise;
  deleteChatRoom: (where: ChatRoomWhereUniqueInput) => ChatRoomPromise;
  deleteManyChatRooms: (where?: ChatRoomWhereInput) => BatchPayloadPromise;
  createClub: (data: ClubCreateInput) => ClubPromise;
  updateClub: (args: {
    data: ClubUpdateInput;
    where: ClubWhereUniqueInput;
  }) => ClubPromise;
  updateManyClubs: (args: {
    data: ClubUpdateManyMutationInput;
    where?: ClubWhereInput;
  }) => BatchPayloadPromise;
  upsertClub: (args: {
    where: ClubWhereUniqueInput;
    create: ClubCreateInput;
    update: ClubUpdateInput;
  }) => ClubPromise;
  deleteClub: (where: ClubWhereUniqueInput) => ClubPromise;
  deleteManyClubs: (where?: ClubWhereInput) => BatchPayloadPromise;
  createFriend: (data: FriendCreateInput) => FriendPromise;
  updateFriend: (args: {
    data: FriendUpdateInput;
    where: FriendWhereUniqueInput;
  }) => FriendPromise;
  updateManyFriends: (args: {
    data: FriendUpdateManyMutationInput;
    where?: FriendWhereInput;
  }) => BatchPayloadPromise;
  upsertFriend: (args: {
    where: FriendWhereUniqueInput;
    create: FriendCreateInput;
    update: FriendUpdateInput;
  }) => FriendPromise;
  deleteFriend: (where: FriendWhereUniqueInput) => FriendPromise;
  deleteManyFriends: (where?: FriendWhereInput) => BatchPayloadPromise;
  createMessage: (data: MessageCreateInput) => MessagePromise;
  updateMessage: (args: {
    data: MessageUpdateInput;
    where: MessageWhereUniqueInput;
  }) => MessagePromise;
  updateManyMessages: (args: {
    data: MessageUpdateManyMutationInput;
    where?: MessageWhereInput;
  }) => BatchPayloadPromise;
  upsertMessage: (args: {
    where: MessageWhereUniqueInput;
    create: MessageCreateInput;
    update: MessageUpdateInput;
  }) => MessagePromise;
  deleteMessage: (where: MessageWhereUniqueInput) => MessagePromise;
  deleteManyMessages: (where?: MessageWhereInput) => BatchPayloadPromise;
  createUser: (data: UserCreateInput) => UserPromise;
  updateUser: (args: {
    data: UserUpdateInput;
    where: UserWhereUniqueInput;
  }) => UserPromise;
  updateManyUsers: (args: {
    data: UserUpdateManyMutationInput;
    where?: UserWhereInput;
  }) => BatchPayloadPromise;
  upsertUser: (args: {
    where: UserWhereUniqueInput;
    create: UserCreateInput;
    update: UserUpdateInput;
  }) => UserPromise;
  deleteUser: (where: UserWhereUniqueInput) => UserPromise;
  deleteManyUsers: (where?: UserWhereInput) => BatchPayloadPromise;
  createUserClub: (data: UserClubCreateInput) => UserClubPromise;
  updateUserClub: (args: {
    data: UserClubUpdateInput;
    where: UserClubWhereUniqueInput;
  }) => UserClubPromise;
  updateManyUserClubs: (args: {
    data: UserClubUpdateManyMutationInput;
    where?: UserClubWhereInput;
  }) => BatchPayloadPromise;
  upsertUserClub: (args: {
    where: UserClubWhereUniqueInput;
    create: UserClubCreateInput;
    update: UserClubUpdateInput;
  }) => UserClubPromise;
  deleteUserClub: (where: UserClubWhereUniqueInput) => UserClubPromise;
  deleteManyUserClubs: (where?: UserClubWhereInput) => BatchPayloadPromise;

  /**
   * Subscriptions
   */

  $subscribe: Subscription;
}

export interface Subscription {
  chatRoom: (
    where?: ChatRoomSubscriptionWhereInput
  ) => ChatRoomSubscriptionPayloadSubscription;
  club: (
    where?: ClubSubscriptionWhereInput
  ) => ClubSubscriptionPayloadSubscription;
  friend: (
    where?: FriendSubscriptionWhereInput
  ) => FriendSubscriptionPayloadSubscription;
  message: (
    where?: MessageSubscriptionWhereInput
  ) => MessageSubscriptionPayloadSubscription;
  user: (
    where?: UserSubscriptionWhereInput
  ) => UserSubscriptionPayloadSubscription;
  userClub: (
    where?: UserClubSubscriptionWhereInput
  ) => UserClubSubscriptionPayloadSubscription;
}

export interface ClientConstructor<T> {
  new (options?: BaseClientOptions): T;
}

/**
 * Types
 */

export type UserOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "username_ASC"
  | "username_DESC"
  | "password_ASC"
  | "password_DESC"
  | "email_ASC"
  | "email_DESC";

export type UserClubOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "userID_ASC"
  | "userID_DESC"
  | "clubID_ASC"
  | "clubID_DESC";

export type FriendOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "user1ID_ASC"
  | "user1ID_DESC"
  | "user2ID_ASC"
  | "user2ID_DESC";

export type ChatRoomOrderByInput = "id_ASC" | "id_DESC";

export type ClubOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "name_ASC"
  | "name_DESC"
  | "email_ASC"
  | "email_DESC"
  | "city_ASC"
  | "city_DESC";

export type MessageOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "message_ASC"
  | "message_DESC";

export type MutationType = "CREATED" | "UPDATED" | "DELETED";

export interface FriendUpdateWithoutUser1DataInput {
  user1ID?: Maybe<ID_Input>;
  user2?: Maybe<UserUpdateOneRequiredInput>;
  user2ID?: Maybe<ID_Input>;
}

export type ChatRoomWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
}>;

export interface ChatRoomScalarWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  AND?: Maybe<ChatRoomScalarWhereInput[] | ChatRoomScalarWhereInput>;
  OR?: Maybe<ChatRoomScalarWhereInput[] | ChatRoomScalarWhereInput>;
  NOT?: Maybe<ChatRoomScalarWhereInput[] | ChatRoomScalarWhereInput>;
}

export interface ChatRoomWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  users_every?: Maybe<UserWhereInput>;
  users_some?: Maybe<UserWhereInput>;
  users_none?: Maybe<UserWhereInput>;
  AND?: Maybe<ChatRoomWhereInput[] | ChatRoomWhereInput>;
  OR?: Maybe<ChatRoomWhereInput[] | ChatRoomWhereInput>;
  NOT?: Maybe<ChatRoomWhereInput[] | ChatRoomWhereInput>;
}

export interface UserCreateOneInput {
  create?: Maybe<UserCreateInput>;
  connect?: Maybe<UserWhereUniqueInput>;
}

export interface UserClubScalarWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  userID?: Maybe<ID_Input>;
  userID_not?: Maybe<ID_Input>;
  userID_in?: Maybe<ID_Input[] | ID_Input>;
  userID_not_in?: Maybe<ID_Input[] | ID_Input>;
  userID_lt?: Maybe<ID_Input>;
  userID_lte?: Maybe<ID_Input>;
  userID_gt?: Maybe<ID_Input>;
  userID_gte?: Maybe<ID_Input>;
  userID_contains?: Maybe<ID_Input>;
  userID_not_contains?: Maybe<ID_Input>;
  userID_starts_with?: Maybe<ID_Input>;
  userID_not_starts_with?: Maybe<ID_Input>;
  userID_ends_with?: Maybe<ID_Input>;
  userID_not_ends_with?: Maybe<ID_Input>;
  clubID?: Maybe<ID_Input>;
  clubID_not?: Maybe<ID_Input>;
  clubID_in?: Maybe<ID_Input[] | ID_Input>;
  clubID_not_in?: Maybe<ID_Input[] | ID_Input>;
  clubID_lt?: Maybe<ID_Input>;
  clubID_lte?: Maybe<ID_Input>;
  clubID_gt?: Maybe<ID_Input>;
  clubID_gte?: Maybe<ID_Input>;
  clubID_contains?: Maybe<ID_Input>;
  clubID_not_contains?: Maybe<ID_Input>;
  clubID_starts_with?: Maybe<ID_Input>;
  clubID_not_starts_with?: Maybe<ID_Input>;
  clubID_ends_with?: Maybe<ID_Input>;
  clubID_not_ends_with?: Maybe<ID_Input>;
  AND?: Maybe<UserClubScalarWhereInput[] | UserClubScalarWhereInput>;
  OR?: Maybe<UserClubScalarWhereInput[] | UserClubScalarWhereInput>;
  NOT?: Maybe<UserClubScalarWhereInput[] | UserClubScalarWhereInput>;
}

export interface UserCreateInput {
  username: String;
  password: String;
  email: String;
  userClub?: Maybe<UserClubCreateOneWithoutUserInput>;
  friends?: Maybe<FriendCreateManyWithoutUser1Input>;
  chatRooms?: Maybe<ChatRoomCreateManyWithoutUsersInput>;
}

export interface UserUpsertNestedInput {
  update: UserUpdateDataInput;
  create: UserCreateInput;
}

export interface ChatRoomCreateManyWithoutUsersInput {
  connect?: Maybe<ChatRoomWhereUniqueInput[] | ChatRoomWhereUniqueInput>;
}

export interface FriendWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  user1?: Maybe<UserWhereInput>;
  user1ID?: Maybe<ID_Input>;
  user1ID_not?: Maybe<ID_Input>;
  user1ID_in?: Maybe<ID_Input[] | ID_Input>;
  user1ID_not_in?: Maybe<ID_Input[] | ID_Input>;
  user1ID_lt?: Maybe<ID_Input>;
  user1ID_lte?: Maybe<ID_Input>;
  user1ID_gt?: Maybe<ID_Input>;
  user1ID_gte?: Maybe<ID_Input>;
  user1ID_contains?: Maybe<ID_Input>;
  user1ID_not_contains?: Maybe<ID_Input>;
  user1ID_starts_with?: Maybe<ID_Input>;
  user1ID_not_starts_with?: Maybe<ID_Input>;
  user1ID_ends_with?: Maybe<ID_Input>;
  user1ID_not_ends_with?: Maybe<ID_Input>;
  user2?: Maybe<UserWhereInput>;
  user2ID?: Maybe<ID_Input>;
  user2ID_not?: Maybe<ID_Input>;
  user2ID_in?: Maybe<ID_Input[] | ID_Input>;
  user2ID_not_in?: Maybe<ID_Input[] | ID_Input>;
  user2ID_lt?: Maybe<ID_Input>;
  user2ID_lte?: Maybe<ID_Input>;
  user2ID_gt?: Maybe<ID_Input>;
  user2ID_gte?: Maybe<ID_Input>;
  user2ID_contains?: Maybe<ID_Input>;
  user2ID_not_contains?: Maybe<ID_Input>;
  user2ID_starts_with?: Maybe<ID_Input>;
  user2ID_not_starts_with?: Maybe<ID_Input>;
  user2ID_ends_with?: Maybe<ID_Input>;
  user2ID_not_ends_with?: Maybe<ID_Input>;
  AND?: Maybe<FriendWhereInput[] | FriendWhereInput>;
  OR?: Maybe<FriendWhereInput[] | FriendWhereInput>;
  NOT?: Maybe<FriendWhereInput[] | FriendWhereInput>;
}

export interface ChatRoomUpdateInput {
  users?: Maybe<UserUpdateManyWithoutChatRoomsInput>;
}

export interface UserSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<UserWhereInput>;
  AND?: Maybe<UserSubscriptionWhereInput[] | UserSubscriptionWhereInput>;
  OR?: Maybe<UserSubscriptionWhereInput[] | UserSubscriptionWhereInput>;
  NOT?: Maybe<UserSubscriptionWhereInput[] | UserSubscriptionWhereInput>;
}

export interface UserUpdateManyWithoutChatRoomsInput {
  create?: Maybe<
    UserCreateWithoutChatRoomsInput[] | UserCreateWithoutChatRoomsInput
  >;
  delete?: Maybe<UserWhereUniqueInput[] | UserWhereUniqueInput>;
  connect?: Maybe<UserWhereUniqueInput[] | UserWhereUniqueInput>;
  set?: Maybe<UserWhereUniqueInput[] | UserWhereUniqueInput>;
  disconnect?: Maybe<UserWhereUniqueInput[] | UserWhereUniqueInput>;
  update?: Maybe<
    | UserUpdateWithWhereUniqueWithoutChatRoomsInput[]
    | UserUpdateWithWhereUniqueWithoutChatRoomsInput
  >;
  upsert?: Maybe<
    | UserUpsertWithWhereUniqueWithoutChatRoomsInput[]
    | UserUpsertWithWhereUniqueWithoutChatRoomsInput
  >;
  deleteMany?: Maybe<UserScalarWhereInput[] | UserScalarWhereInput>;
  updateMany?: Maybe<
    UserUpdateManyWithWhereNestedInput[] | UserUpdateManyWithWhereNestedInput
  >;
}

export interface MessageSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<MessageWhereInput>;
  AND?: Maybe<MessageSubscriptionWhereInput[] | MessageSubscriptionWhereInput>;
  OR?: Maybe<MessageSubscriptionWhereInput[] | MessageSubscriptionWhereInput>;
  NOT?: Maybe<MessageSubscriptionWhereInput[] | MessageSubscriptionWhereInput>;
}

export interface UserUpdateWithWhereUniqueWithoutChatRoomsInput {
  where: UserWhereUniqueInput;
  data: UserUpdateWithoutChatRoomsDataInput;
}

export interface ClubSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<ClubWhereInput>;
  AND?: Maybe<ClubSubscriptionWhereInput[] | ClubSubscriptionWhereInput>;
  OR?: Maybe<ClubSubscriptionWhereInput[] | ClubSubscriptionWhereInput>;
  NOT?: Maybe<ClubSubscriptionWhereInput[] | ClubSubscriptionWhereInput>;
}

export interface UserUpdateWithoutChatRoomsDataInput {
  username?: Maybe<String>;
  password?: Maybe<String>;
  email?: Maybe<String>;
  userClub?: Maybe<UserClubUpdateOneWithoutUserInput>;
  friends?: Maybe<FriendUpdateManyWithoutUser1Input>;
}

export interface UserClubUpdateManyMutationInput {
  userID?: Maybe<ID_Input>;
  clubID?: Maybe<ID_Input>;
}

export interface UserClubUpdateOneWithoutUserInput {
  create?: Maybe<UserClubCreateWithoutUserInput>;
  update?: Maybe<UserClubUpdateWithoutUserDataInput>;
  upsert?: Maybe<UserClubUpsertWithoutUserInput>;
  delete?: Maybe<Boolean>;
  disconnect?: Maybe<Boolean>;
  connect?: Maybe<UserClubWhereUniqueInput>;
}

export interface UserClubUpdateInput {
  user?: Maybe<UserUpdateOneRequiredWithoutUserClubInput>;
  userID?: Maybe<ID_Input>;
  club?: Maybe<ClubUpdateOneRequiredWithoutUserClubInput>;
  clubID?: Maybe<ID_Input>;
}

export interface UserClubUpdateWithoutUserDataInput {
  userID?: Maybe<ID_Input>;
  club?: Maybe<ClubUpdateOneRequiredWithoutUserClubInput>;
  clubID?: Maybe<ID_Input>;
}

export interface UserUpdateManyMutationInput {
  username?: Maybe<String>;
  password?: Maybe<String>;
  email?: Maybe<String>;
}

export interface ClubUpdateOneRequiredWithoutUserClubInput {
  create?: Maybe<ClubCreateWithoutUserClubInput>;
  update?: Maybe<ClubUpdateWithoutUserClubDataInput>;
  upsert?: Maybe<ClubUpsertWithoutUserClubInput>;
  connect?: Maybe<ClubWhereUniqueInput>;
}

export type FriendWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
}>;

export interface ClubUpdateWithoutUserClubDataInput {
  name?: Maybe<String>;
  email?: Maybe<String>;
  city?: Maybe<String>;
}

export interface ChatRoomUpsertNestedInput {
  update: ChatRoomUpdateDataInput;
  create: ChatRoomCreateInput;
}

export interface ClubUpsertWithoutUserClubInput {
  update: ClubUpdateWithoutUserClubDataInput;
  create: ClubCreateWithoutUserClubInput;
}

export type MessageWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
}>;

export interface UserClubUpsertWithoutUserInput {
  update: UserClubUpdateWithoutUserDataInput;
  create: UserClubCreateWithoutUserInput;
}

export interface MessageWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  user?: Maybe<UserWhereInput>;
  chatRoom?: Maybe<ChatRoomWhereInput>;
  message?: Maybe<String>;
  message_not?: Maybe<String>;
  message_in?: Maybe<String[] | String>;
  message_not_in?: Maybe<String[] | String>;
  message_lt?: Maybe<String>;
  message_lte?: Maybe<String>;
  message_gt?: Maybe<String>;
  message_gte?: Maybe<String>;
  message_contains?: Maybe<String>;
  message_not_contains?: Maybe<String>;
  message_starts_with?: Maybe<String>;
  message_not_starts_with?: Maybe<String>;
  message_ends_with?: Maybe<String>;
  message_not_ends_with?: Maybe<String>;
  AND?: Maybe<MessageWhereInput[] | MessageWhereInput>;
  OR?: Maybe<MessageWhereInput[] | MessageWhereInput>;
  NOT?: Maybe<MessageWhereInput[] | MessageWhereInput>;
}

export interface FriendUpdateManyWithoutUser1Input {
  create?: Maybe<
    FriendCreateWithoutUser1Input[] | FriendCreateWithoutUser1Input
  >;
  delete?: Maybe<FriendWhereUniqueInput[] | FriendWhereUniqueInput>;
  connect?: Maybe<FriendWhereUniqueInput[] | FriendWhereUniqueInput>;
  set?: Maybe<FriendWhereUniqueInput[] | FriendWhereUniqueInput>;
  disconnect?: Maybe<FriendWhereUniqueInput[] | FriendWhereUniqueInput>;
  update?: Maybe<
    | FriendUpdateWithWhereUniqueWithoutUser1Input[]
    | FriendUpdateWithWhereUniqueWithoutUser1Input
  >;
  upsert?: Maybe<
    | FriendUpsertWithWhereUniqueWithoutUser1Input[]
    | FriendUpsertWithWhereUniqueWithoutUser1Input
  >;
  deleteMany?: Maybe<FriendScalarWhereInput[] | FriendScalarWhereInput>;
  updateMany?: Maybe<
    | FriendUpdateManyWithWhereNestedInput[]
    | FriendUpdateManyWithWhereNestedInput
  >;
}

export interface MessageUpdateInput {
  user?: Maybe<UserUpdateOneRequiredInput>;
  chatRoom?: Maybe<ChatRoomUpdateOneRequiredInput>;
  message?: Maybe<String>;
}

export interface FriendUpdateWithWhereUniqueWithoutUser1Input {
  where: FriendWhereUniqueInput;
  data: FriendUpdateWithoutUser1DataInput;
}

export interface MessageCreateInput {
  user: UserCreateOneInput;
  chatRoom: ChatRoomCreateOneInput;
  message: String;
}

export interface UserCreateOneWithoutFriendsInput {
  create?: Maybe<UserCreateWithoutFriendsInput>;
  connect?: Maybe<UserWhereUniqueInput>;
}

export interface FriendUpdateManyMutationInput {
  user1ID?: Maybe<ID_Input>;
  user2ID?: Maybe<ID_Input>;
}

export interface UserUpdateOneRequiredInput {
  create?: Maybe<UserCreateInput>;
  update?: Maybe<UserUpdateDataInput>;
  upsert?: Maybe<UserUpsertNestedInput>;
  connect?: Maybe<UserWhereUniqueInput>;
}

export interface UserUpdateWithoutFriendsDataInput {
  username?: Maybe<String>;
  password?: Maybe<String>;
  email?: Maybe<String>;
  userClub?: Maybe<UserClubUpdateOneWithoutUserInput>;
  chatRooms?: Maybe<ChatRoomUpdateManyWithoutUsersInput>;
}

export interface UserUpdateDataInput {
  username?: Maybe<String>;
  password?: Maybe<String>;
  email?: Maybe<String>;
  userClub?: Maybe<UserClubUpdateOneWithoutUserInput>;
  friends?: Maybe<FriendUpdateManyWithoutUser1Input>;
  chatRooms?: Maybe<ChatRoomUpdateManyWithoutUsersInput>;
}

export interface UserUpdateOneRequiredWithoutFriendsInput {
  create?: Maybe<UserCreateWithoutFriendsInput>;
  update?: Maybe<UserUpdateWithoutFriendsDataInput>;
  upsert?: Maybe<UserUpsertWithoutFriendsInput>;
  connect?: Maybe<UserWhereUniqueInput>;
}

export interface ChatRoomUpdateManyWithoutUsersInput {
  delete?: Maybe<ChatRoomWhereUniqueInput[] | ChatRoomWhereUniqueInput>;
  connect?: Maybe<ChatRoomWhereUniqueInput[] | ChatRoomWhereUniqueInput>;
  set?: Maybe<ChatRoomWhereUniqueInput[] | ChatRoomWhereUniqueInput>;
  disconnect?: Maybe<ChatRoomWhereUniqueInput[] | ChatRoomWhereUniqueInput>;
  deleteMany?: Maybe<ChatRoomScalarWhereInput[] | ChatRoomScalarWhereInput>;
}

export interface UserCreateWithoutFriendsInput {
  username: String;
  password: String;
  email: String;
  userClub?: Maybe<UserClubCreateOneWithoutUserInput>;
  chatRooms?: Maybe<ChatRoomCreateManyWithoutUsersInput>;
}

export interface FriendCreateInput {
  user1: UserCreateOneWithoutFriendsInput;
  user1ID: ID_Input;
  user2: UserCreateOneInput;
  user2ID: ID_Input;
}

export interface ChatRoomCreateInput {
  users?: Maybe<UserCreateManyWithoutChatRoomsInput>;
}

export interface ClubUpdateManyMutationInput {
  name?: Maybe<String>;
  email?: Maybe<String>;
  city?: Maybe<String>;
}

export interface UserCreateWithoutChatRoomsInput {
  username: String;
  password: String;
  email: String;
  userClub?: Maybe<UserClubCreateOneWithoutUserInput>;
  friends?: Maybe<FriendCreateManyWithoutUser1Input>;
}

export interface FriendUpsertWithWhereUniqueWithoutUser1Input {
  where: FriendWhereUniqueInput;
  update: FriendUpdateWithoutUser1DataInput;
  create: FriendCreateWithoutUser1Input;
}

export interface UserClubCreateWithoutUserInput {
  userID: ID_Input;
  club: ClubCreateOneWithoutUserClubInput;
  clubID: ID_Input;
}

export interface FriendScalarWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  user1ID?: Maybe<ID_Input>;
  user1ID_not?: Maybe<ID_Input>;
  user1ID_in?: Maybe<ID_Input[] | ID_Input>;
  user1ID_not_in?: Maybe<ID_Input[] | ID_Input>;
  user1ID_lt?: Maybe<ID_Input>;
  user1ID_lte?: Maybe<ID_Input>;
  user1ID_gt?: Maybe<ID_Input>;
  user1ID_gte?: Maybe<ID_Input>;
  user1ID_contains?: Maybe<ID_Input>;
  user1ID_not_contains?: Maybe<ID_Input>;
  user1ID_starts_with?: Maybe<ID_Input>;
  user1ID_not_starts_with?: Maybe<ID_Input>;
  user1ID_ends_with?: Maybe<ID_Input>;
  user1ID_not_ends_with?: Maybe<ID_Input>;
  user2ID?: Maybe<ID_Input>;
  user2ID_not?: Maybe<ID_Input>;
  user2ID_in?: Maybe<ID_Input[] | ID_Input>;
  user2ID_not_in?: Maybe<ID_Input[] | ID_Input>;
  user2ID_lt?: Maybe<ID_Input>;
  user2ID_lte?: Maybe<ID_Input>;
  user2ID_gt?: Maybe<ID_Input>;
  user2ID_gte?: Maybe<ID_Input>;
  user2ID_contains?: Maybe<ID_Input>;
  user2ID_not_contains?: Maybe<ID_Input>;
  user2ID_starts_with?: Maybe<ID_Input>;
  user2ID_not_starts_with?: Maybe<ID_Input>;
  user2ID_ends_with?: Maybe<ID_Input>;
  user2ID_not_ends_with?: Maybe<ID_Input>;
  AND?: Maybe<FriendScalarWhereInput[] | FriendScalarWhereInput>;
  OR?: Maybe<FriendScalarWhereInput[] | FriendScalarWhereInput>;
  NOT?: Maybe<FriendScalarWhereInput[] | FriendScalarWhereInput>;
}

export interface ClubCreateWithoutUserClubInput {
  name: String;
  email: String;
  city: String;
}

export interface FriendUpdateManyWithWhereNestedInput {
  where: FriendScalarWhereInput;
  data: FriendUpdateManyDataInput;
}

export interface FriendCreateWithoutUser1Input {
  user1ID: ID_Input;
  user2: UserCreateOneInput;
  user2ID: ID_Input;
}

export interface FriendUpdateManyDataInput {
  user1ID?: Maybe<ID_Input>;
  user2ID?: Maybe<ID_Input>;
}

export interface ClubWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  name?: Maybe<String>;
  name_not?: Maybe<String>;
  name_in?: Maybe<String[] | String>;
  name_not_in?: Maybe<String[] | String>;
  name_lt?: Maybe<String>;
  name_lte?: Maybe<String>;
  name_gt?: Maybe<String>;
  name_gte?: Maybe<String>;
  name_contains?: Maybe<String>;
  name_not_contains?: Maybe<String>;
  name_starts_with?: Maybe<String>;
  name_not_starts_with?: Maybe<String>;
  name_ends_with?: Maybe<String>;
  name_not_ends_with?: Maybe<String>;
  userClub_every?: Maybe<UserClubWhereInput>;
  userClub_some?: Maybe<UserClubWhereInput>;
  userClub_none?: Maybe<UserClubWhereInput>;
  email?: Maybe<String>;
  email_not?: Maybe<String>;
  email_in?: Maybe<String[] | String>;
  email_not_in?: Maybe<String[] | String>;
  email_lt?: Maybe<String>;
  email_lte?: Maybe<String>;
  email_gt?: Maybe<String>;
  email_gte?: Maybe<String>;
  email_contains?: Maybe<String>;
  email_not_contains?: Maybe<String>;
  email_starts_with?: Maybe<String>;
  email_not_starts_with?: Maybe<String>;
  email_ends_with?: Maybe<String>;
  email_not_ends_with?: Maybe<String>;
  city?: Maybe<String>;
  city_not?: Maybe<String>;
  city_in?: Maybe<String[] | String>;
  city_not_in?: Maybe<String[] | String>;
  city_lt?: Maybe<String>;
  city_lte?: Maybe<String>;
  city_gt?: Maybe<String>;
  city_gte?: Maybe<String>;
  city_contains?: Maybe<String>;
  city_not_contains?: Maybe<String>;
  city_starts_with?: Maybe<String>;
  city_not_starts_with?: Maybe<String>;
  city_ends_with?: Maybe<String>;
  city_not_ends_with?: Maybe<String>;
  AND?: Maybe<ClubWhereInput[] | ClubWhereInput>;
  OR?: Maybe<ClubWhereInput[] | ClubWhereInput>;
  NOT?: Maybe<ClubWhereInput[] | ClubWhereInput>;
}

export interface UserUpsertWithWhereUniqueWithoutChatRoomsInput {
  where: UserWhereUniqueInput;
  update: UserUpdateWithoutChatRoomsDataInput;
  create: UserCreateWithoutChatRoomsInput;
}

export interface FriendSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<FriendWhereInput>;
  AND?: Maybe<FriendSubscriptionWhereInput[] | FriendSubscriptionWhereInput>;
  OR?: Maybe<FriendSubscriptionWhereInput[] | FriendSubscriptionWhereInput>;
  NOT?: Maybe<FriendSubscriptionWhereInput[] | FriendSubscriptionWhereInput>;
}

export interface UserScalarWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  username?: Maybe<String>;
  username_not?: Maybe<String>;
  username_in?: Maybe<String[] | String>;
  username_not_in?: Maybe<String[] | String>;
  username_lt?: Maybe<String>;
  username_lte?: Maybe<String>;
  username_gt?: Maybe<String>;
  username_gte?: Maybe<String>;
  username_contains?: Maybe<String>;
  username_not_contains?: Maybe<String>;
  username_starts_with?: Maybe<String>;
  username_not_starts_with?: Maybe<String>;
  username_ends_with?: Maybe<String>;
  username_not_ends_with?: Maybe<String>;
  password?: Maybe<String>;
  password_not?: Maybe<String>;
  password_in?: Maybe<String[] | String>;
  password_not_in?: Maybe<String[] | String>;
  password_lt?: Maybe<String>;
  password_lte?: Maybe<String>;
  password_gt?: Maybe<String>;
  password_gte?: Maybe<String>;
  password_contains?: Maybe<String>;
  password_not_contains?: Maybe<String>;
  password_starts_with?: Maybe<String>;
  password_not_starts_with?: Maybe<String>;
  password_ends_with?: Maybe<String>;
  password_not_ends_with?: Maybe<String>;
  email?: Maybe<String>;
  email_not?: Maybe<String>;
  email_in?: Maybe<String[] | String>;
  email_not_in?: Maybe<String[] | String>;
  email_lt?: Maybe<String>;
  email_lte?: Maybe<String>;
  email_gt?: Maybe<String>;
  email_gte?: Maybe<String>;
  email_contains?: Maybe<String>;
  email_not_contains?: Maybe<String>;
  email_starts_with?: Maybe<String>;
  email_not_starts_with?: Maybe<String>;
  email_ends_with?: Maybe<String>;
  email_not_ends_with?: Maybe<String>;
  AND?: Maybe<UserScalarWhereInput[] | UserScalarWhereInput>;
  OR?: Maybe<UserScalarWhereInput[] | UserScalarWhereInput>;
  NOT?: Maybe<UserScalarWhereInput[] | UserScalarWhereInput>;
}

export type ClubWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
  email?: Maybe<String>;
}>;

export interface UserUpdateManyWithWhereNestedInput {
  where: UserScalarWhereInput;
  data: UserUpdateManyDataInput;
}

export interface UserUpdateInput {
  username?: Maybe<String>;
  password?: Maybe<String>;
  email?: Maybe<String>;
  userClub?: Maybe<UserClubUpdateOneWithoutUserInput>;
  friends?: Maybe<FriendUpdateManyWithoutUser1Input>;
  chatRooms?: Maybe<ChatRoomUpdateManyWithoutUsersInput>;
}

export interface UserUpdateManyDataInput {
  username?: Maybe<String>;
  password?: Maybe<String>;
  email?: Maybe<String>;
}

export interface ChatRoomUpdateDataInput {
  users?: Maybe<UserUpdateManyWithoutChatRoomsInput>;
}

export interface UserClubUpdateManyDataInput {
  userID?: Maybe<ID_Input>;
  clubID?: Maybe<ID_Input>;
}

export interface UserWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  username?: Maybe<String>;
  username_not?: Maybe<String>;
  username_in?: Maybe<String[] | String>;
  username_not_in?: Maybe<String[] | String>;
  username_lt?: Maybe<String>;
  username_lte?: Maybe<String>;
  username_gt?: Maybe<String>;
  username_gte?: Maybe<String>;
  username_contains?: Maybe<String>;
  username_not_contains?: Maybe<String>;
  username_starts_with?: Maybe<String>;
  username_not_starts_with?: Maybe<String>;
  username_ends_with?: Maybe<String>;
  username_not_ends_with?: Maybe<String>;
  password?: Maybe<String>;
  password_not?: Maybe<String>;
  password_in?: Maybe<String[] | String>;
  password_not_in?: Maybe<String[] | String>;
  password_lt?: Maybe<String>;
  password_lte?: Maybe<String>;
  password_gt?: Maybe<String>;
  password_gte?: Maybe<String>;
  password_contains?: Maybe<String>;
  password_not_contains?: Maybe<String>;
  password_starts_with?: Maybe<String>;
  password_not_starts_with?: Maybe<String>;
  password_ends_with?: Maybe<String>;
  password_not_ends_with?: Maybe<String>;
  email?: Maybe<String>;
  email_not?: Maybe<String>;
  email_in?: Maybe<String[] | String>;
  email_not_in?: Maybe<String[] | String>;
  email_lt?: Maybe<String>;
  email_lte?: Maybe<String>;
  email_gt?: Maybe<String>;
  email_gte?: Maybe<String>;
  email_contains?: Maybe<String>;
  email_not_contains?: Maybe<String>;
  email_starts_with?: Maybe<String>;
  email_not_starts_with?: Maybe<String>;
  email_ends_with?: Maybe<String>;
  email_not_ends_with?: Maybe<String>;
  userClub?: Maybe<UserClubWhereInput>;
  friends_every?: Maybe<FriendWhereInput>;
  friends_some?: Maybe<FriendWhereInput>;
  friends_none?: Maybe<FriendWhereInput>;
  chatRooms_every?: Maybe<ChatRoomWhereInput>;
  chatRooms_some?: Maybe<ChatRoomWhereInput>;
  chatRooms_none?: Maybe<ChatRoomWhereInput>;
  AND?: Maybe<UserWhereInput[] | UserWhereInput>;
  OR?: Maybe<UserWhereInput[] | UserWhereInput>;
  NOT?: Maybe<UserWhereInput[] | UserWhereInput>;
}

export interface UserClubUpdateManyWithWhereNestedInput {
  where: UserClubScalarWhereInput;
  data: UserClubUpdateManyDataInput;
}

export type UserWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
  username?: Maybe<String>;
  email?: Maybe<String>;
}>;

export interface ClubCreateInput {
  name: String;
  userClub?: Maybe<UserClubCreateManyWithoutClubInput>;
  email: String;
  city: String;
}

export type UserClubWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
}>;

export interface UserClubCreateManyWithoutClubInput {
  create?: Maybe<
    UserClubCreateWithoutClubInput[] | UserClubCreateWithoutClubInput
  >;
  connect?: Maybe<UserClubWhereUniqueInput[] | UserClubWhereUniqueInput>;
}

export interface UserClubCreateOneWithoutUserInput {
  create?: Maybe<UserClubCreateWithoutUserInput>;
  connect?: Maybe<UserClubWhereUniqueInput>;
}

export interface UserClubCreateWithoutClubInput {
  user: UserCreateOneWithoutUserClubInput;
  userID: ID_Input;
  clubID: ID_Input;
}

export interface FriendCreateManyWithoutUser1Input {
  create?: Maybe<
    FriendCreateWithoutUser1Input[] | FriendCreateWithoutUser1Input
  >;
  connect?: Maybe<FriendWhereUniqueInput[] | FriendWhereUniqueInput>;
}

export interface UserCreateOneWithoutUserClubInput {
  create?: Maybe<UserCreateWithoutUserClubInput>;
  connect?: Maybe<UserWhereUniqueInput>;
}

export interface UserClubWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  user?: Maybe<UserWhereInput>;
  userID?: Maybe<ID_Input>;
  userID_not?: Maybe<ID_Input>;
  userID_in?: Maybe<ID_Input[] | ID_Input>;
  userID_not_in?: Maybe<ID_Input[] | ID_Input>;
  userID_lt?: Maybe<ID_Input>;
  userID_lte?: Maybe<ID_Input>;
  userID_gt?: Maybe<ID_Input>;
  userID_gte?: Maybe<ID_Input>;
  userID_contains?: Maybe<ID_Input>;
  userID_not_contains?: Maybe<ID_Input>;
  userID_starts_with?: Maybe<ID_Input>;
  userID_not_starts_with?: Maybe<ID_Input>;
  userID_ends_with?: Maybe<ID_Input>;
  userID_not_ends_with?: Maybe<ID_Input>;
  club?: Maybe<ClubWhereInput>;
  clubID?: Maybe<ID_Input>;
  clubID_not?: Maybe<ID_Input>;
  clubID_in?: Maybe<ID_Input[] | ID_Input>;
  clubID_not_in?: Maybe<ID_Input[] | ID_Input>;
  clubID_lt?: Maybe<ID_Input>;
  clubID_lte?: Maybe<ID_Input>;
  clubID_gt?: Maybe<ID_Input>;
  clubID_gte?: Maybe<ID_Input>;
  clubID_contains?: Maybe<ID_Input>;
  clubID_not_contains?: Maybe<ID_Input>;
  clubID_starts_with?: Maybe<ID_Input>;
  clubID_not_starts_with?: Maybe<ID_Input>;
  clubID_ends_with?: Maybe<ID_Input>;
  clubID_not_ends_with?: Maybe<ID_Input>;
  AND?: Maybe<UserClubWhereInput[] | UserClubWhereInput>;
  OR?: Maybe<UserClubWhereInput[] | UserClubWhereInput>;
  NOT?: Maybe<UserClubWhereInput[] | UserClubWhereInput>;
}

export interface UserCreateWithoutUserClubInput {
  username: String;
  password: String;
  email: String;
  friends?: Maybe<FriendCreateManyWithoutUser1Input>;
  chatRooms?: Maybe<ChatRoomCreateManyWithoutUsersInput>;
}

export interface UserClubCreateInput {
  user: UserCreateOneWithoutUserClubInput;
  userID: ID_Input;
  club: ClubCreateOneWithoutUserClubInput;
  clubID: ID_Input;
}

export interface ClubUpdateInput {
  name?: Maybe<String>;
  userClub?: Maybe<UserClubUpdateManyWithoutClubInput>;
  email?: Maybe<String>;
  city?: Maybe<String>;
}

export interface ChatRoomUpdateOneRequiredInput {
  create?: Maybe<ChatRoomCreateInput>;
  update?: Maybe<ChatRoomUpdateDataInput>;
  upsert?: Maybe<ChatRoomUpsertNestedInput>;
  connect?: Maybe<ChatRoomWhereUniqueInput>;
}

export interface UserClubUpdateManyWithoutClubInput {
  create?: Maybe<
    UserClubCreateWithoutClubInput[] | UserClubCreateWithoutClubInput
  >;
  delete?: Maybe<UserClubWhereUniqueInput[] | UserClubWhereUniqueInput>;
  connect?: Maybe<UserClubWhereUniqueInput[] | UserClubWhereUniqueInput>;
  set?: Maybe<UserClubWhereUniqueInput[] | UserClubWhereUniqueInput>;
  disconnect?: Maybe<UserClubWhereUniqueInput[] | UserClubWhereUniqueInput>;
  update?: Maybe<
    | UserClubUpdateWithWhereUniqueWithoutClubInput[]
    | UserClubUpdateWithWhereUniqueWithoutClubInput
  >;
  upsert?: Maybe<
    | UserClubUpsertWithWhereUniqueWithoutClubInput[]
    | UserClubUpsertWithWhereUniqueWithoutClubInput
  >;
  deleteMany?: Maybe<UserClubScalarWhereInput[] | UserClubScalarWhereInput>;
  updateMany?: Maybe<
    | UserClubUpdateManyWithWhereNestedInput[]
    | UserClubUpdateManyWithWhereNestedInput
  >;
}

export interface UserUpsertWithoutFriendsInput {
  update: UserUpdateWithoutFriendsDataInput;
  create: UserCreateWithoutFriendsInput;
}

export interface UserClubUpdateWithWhereUniqueWithoutClubInput {
  where: UserClubWhereUniqueInput;
  data: UserClubUpdateWithoutClubDataInput;
}

export interface UserCreateManyWithoutChatRoomsInput {
  create?: Maybe<
    UserCreateWithoutChatRoomsInput[] | UserCreateWithoutChatRoomsInput
  >;
  connect?: Maybe<UserWhereUniqueInput[] | UserWhereUniqueInput>;
}

export interface UserClubUpdateWithoutClubDataInput {
  user?: Maybe<UserUpdateOneRequiredWithoutUserClubInput>;
  userID?: Maybe<ID_Input>;
  clubID?: Maybe<ID_Input>;
}

export interface UserClubSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<UserClubWhereInput>;
  AND?: Maybe<
    UserClubSubscriptionWhereInput[] | UserClubSubscriptionWhereInput
  >;
  OR?: Maybe<UserClubSubscriptionWhereInput[] | UserClubSubscriptionWhereInput>;
  NOT?: Maybe<
    UserClubSubscriptionWhereInput[] | UserClubSubscriptionWhereInput
  >;
}

export interface UserClubUpsertWithWhereUniqueWithoutClubInput {
  where: UserClubWhereUniqueInput;
  update: UserClubUpdateWithoutClubDataInput;
  create: UserClubCreateWithoutClubInput;
}

export interface UserUpsertWithoutUserClubInput {
  update: UserUpdateWithoutUserClubDataInput;
  create: UserCreateWithoutUserClubInput;
}

export interface UserUpdateWithoutUserClubDataInput {
  username?: Maybe<String>;
  password?: Maybe<String>;
  email?: Maybe<String>;
  friends?: Maybe<FriendUpdateManyWithoutUser1Input>;
  chatRooms?: Maybe<ChatRoomUpdateManyWithoutUsersInput>;
}

export interface UserUpdateOneRequiredWithoutUserClubInput {
  create?: Maybe<UserCreateWithoutUserClubInput>;
  update?: Maybe<UserUpdateWithoutUserClubDataInput>;
  upsert?: Maybe<UserUpsertWithoutUserClubInput>;
  connect?: Maybe<UserWhereUniqueInput>;
}

export interface ChatRoomSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<ChatRoomWhereInput>;
  AND?: Maybe<
    ChatRoomSubscriptionWhereInput[] | ChatRoomSubscriptionWhereInput
  >;
  OR?: Maybe<ChatRoomSubscriptionWhereInput[] | ChatRoomSubscriptionWhereInput>;
  NOT?: Maybe<
    ChatRoomSubscriptionWhereInput[] | ChatRoomSubscriptionWhereInput
  >;
}

export interface ClubCreateOneWithoutUserClubInput {
  create?: Maybe<ClubCreateWithoutUserClubInput>;
  connect?: Maybe<ClubWhereUniqueInput>;
}

export interface FriendUpdateInput {
  user1?: Maybe<UserUpdateOneRequiredWithoutFriendsInput>;
  user1ID?: Maybe<ID_Input>;
  user2?: Maybe<UserUpdateOneRequiredInput>;
  user2ID?: Maybe<ID_Input>;
}

export interface ChatRoomCreateOneInput {
  create?: Maybe<ChatRoomCreateInput>;
  connect?: Maybe<ChatRoomWhereUniqueInput>;
}

export interface MessageUpdateManyMutationInput {
  message?: Maybe<String>;
}

export interface NodeNode {
  id: ID_Output;
}

export interface UserClubPreviousValues {
  id: ID_Output;
  userID: ID_Output;
  clubID: ID_Output;
}

export interface UserClubPreviousValuesPromise
  extends Promise<UserClubPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  userID: () => Promise<ID_Output>;
  clubID: () => Promise<ID_Output>;
}

export interface UserClubPreviousValuesSubscription
  extends Promise<AsyncIterator<UserClubPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  userID: () => Promise<AsyncIterator<ID_Output>>;
  clubID: () => Promise<AsyncIterator<ID_Output>>;
}

export interface ClubEdge {
  node: Club;
  cursor: String;
}

export interface ClubEdgePromise extends Promise<ClubEdge>, Fragmentable {
  node: <T = ClubPromise>() => T;
  cursor: () => Promise<String>;
}

export interface ClubEdgeSubscription
  extends Promise<AsyncIterator<ClubEdge>>,
    Fragmentable {
  node: <T = ClubSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface UserSubscriptionPayload {
  mutation: MutationType;
  node: User;
  updatedFields: String[];
  previousValues: UserPreviousValues;
}

export interface UserSubscriptionPayloadPromise
  extends Promise<UserSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = UserPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = UserPreviousValuesPromise>() => T;
}

export interface UserSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<UserSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = UserSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = UserPreviousValuesSubscription>() => T;
}

export interface ClubConnection {
  pageInfo: PageInfo;
  edges: ClubEdge[];
}

export interface ClubConnectionPromise
  extends Promise<ClubConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<ClubEdge>>() => T;
  aggregate: <T = AggregateClubPromise>() => T;
}

export interface ClubConnectionSubscription
  extends Promise<AsyncIterator<ClubConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<ClubEdgeSubscription>>>() => T;
  aggregate: <T = AggregateClubSubscription>() => T;
}

export interface User {
  id: ID_Output;
  username: String;
  password: String;
  email: String;
}

export interface UserPromise extends Promise<User>, Fragmentable {
  id: () => Promise<ID_Output>;
  username: () => Promise<String>;
  password: () => Promise<String>;
  email: () => Promise<String>;
  userClub: <T = UserClubPromise>() => T;
  friends: <T = FragmentableArray<Friend>>(args?: {
    where?: FriendWhereInput;
    orderBy?: FriendOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  chatRooms: <T = FragmentableArray<ChatRoom>>(args?: {
    where?: ChatRoomWhereInput;
    orderBy?: ChatRoomOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
}

export interface UserSubscription
  extends Promise<AsyncIterator<User>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  username: () => Promise<AsyncIterator<String>>;
  password: () => Promise<AsyncIterator<String>>;
  email: () => Promise<AsyncIterator<String>>;
  userClub: <T = UserClubSubscription>() => T;
  friends: <T = Promise<AsyncIterator<FriendSubscription>>>(args?: {
    where?: FriendWhereInput;
    orderBy?: FriendOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  chatRooms: <T = Promise<AsyncIterator<ChatRoomSubscription>>>(args?: {
    where?: ChatRoomWhereInput;
    orderBy?: ChatRoomOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
}

export interface UserNullablePromise
  extends Promise<User | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  username: () => Promise<String>;
  password: () => Promise<String>;
  email: () => Promise<String>;
  userClub: <T = UserClubPromise>() => T;
  friends: <T = FragmentableArray<Friend>>(args?: {
    where?: FriendWhereInput;
    orderBy?: FriendOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  chatRooms: <T = FragmentableArray<ChatRoom>>(args?: {
    where?: ChatRoomWhereInput;
    orderBy?: ChatRoomOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
}

export interface BatchPayload {
  count: Long;
}

export interface BatchPayloadPromise
  extends Promise<BatchPayload>,
    Fragmentable {
  count: () => Promise<Long>;
}

export interface BatchPayloadSubscription
  extends Promise<AsyncIterator<BatchPayload>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Long>>;
}

export interface UserClubSubscriptionPayload {
  mutation: MutationType;
  node: UserClub;
  updatedFields: String[];
  previousValues: UserClubPreviousValues;
}

export interface UserClubSubscriptionPayloadPromise
  extends Promise<UserClubSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = UserClubPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = UserClubPreviousValuesPromise>() => T;
}

export interface UserClubSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<UserClubSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = UserClubSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = UserClubPreviousValuesSubscription>() => T;
}

export interface AggregateChatRoom {
  count: Int;
}

export interface AggregateChatRoomPromise
  extends Promise<AggregateChatRoom>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateChatRoomSubscription
  extends Promise<AsyncIterator<AggregateChatRoom>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface AggregateUserClub {
  count: Int;
}

export interface AggregateUserClubPromise
  extends Promise<AggregateUserClub>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateUserClubSubscription
  extends Promise<AsyncIterator<AggregateUserClub>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface ChatRoomEdge {
  node: ChatRoom;
  cursor: String;
}

export interface ChatRoomEdgePromise
  extends Promise<ChatRoomEdge>,
    Fragmentable {
  node: <T = ChatRoomPromise>() => T;
  cursor: () => Promise<String>;
}

export interface ChatRoomEdgeSubscription
  extends Promise<AsyncIterator<ChatRoomEdge>>,
    Fragmentable {
  node: <T = ChatRoomSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface UserClubConnection {
  pageInfo: PageInfo;
  edges: UserClubEdge[];
}

export interface UserClubConnectionPromise
  extends Promise<UserClubConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<UserClubEdge>>() => T;
  aggregate: <T = AggregateUserClubPromise>() => T;
}

export interface UserClubConnectionSubscription
  extends Promise<AsyncIterator<UserClubConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<UserClubEdgeSubscription>>>() => T;
  aggregate: <T = AggregateUserClubSubscription>() => T;
}

export interface ChatRoom {
  id: ID_Output;
}

export interface ChatRoomPromise extends Promise<ChatRoom>, Fragmentable {
  id: () => Promise<ID_Output>;
  users: <T = FragmentableArray<User>>(args?: {
    where?: UserWhereInput;
    orderBy?: UserOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
}

export interface ChatRoomSubscription
  extends Promise<AsyncIterator<ChatRoom>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  users: <T = Promise<AsyncIterator<UserSubscription>>>(args?: {
    where?: UserWhereInput;
    orderBy?: UserOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
}

export interface ChatRoomNullablePromise
  extends Promise<ChatRoom | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  users: <T = FragmentableArray<User>>(args?: {
    where?: UserWhereInput;
    orderBy?: UserOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
}

export interface UserEdge {
  node: User;
  cursor: String;
}

export interface UserEdgePromise extends Promise<UserEdge>, Fragmentable {
  node: <T = UserPromise>() => T;
  cursor: () => Promise<String>;
}

export interface UserEdgeSubscription
  extends Promise<AsyncIterator<UserEdge>>,
    Fragmentable {
  node: <T = UserSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface ChatRoomSubscriptionPayload {
  mutation: MutationType;
  node: ChatRoom;
  updatedFields: String[];
  previousValues: ChatRoomPreviousValues;
}

export interface ChatRoomSubscriptionPayloadPromise
  extends Promise<ChatRoomSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = ChatRoomPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = ChatRoomPreviousValuesPromise>() => T;
}

export interface ChatRoomSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<ChatRoomSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = ChatRoomSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = ChatRoomPreviousValuesSubscription>() => T;
}

export interface AggregateMessage {
  count: Int;
}

export interface AggregateMessagePromise
  extends Promise<AggregateMessage>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateMessageSubscription
  extends Promise<AsyncIterator<AggregateMessage>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface ChatRoomPreviousValues {
  id: ID_Output;
}

export interface ChatRoomPreviousValuesPromise
  extends Promise<ChatRoomPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
}

export interface ChatRoomPreviousValuesSubscription
  extends Promise<AsyncIterator<ChatRoomPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
}

export interface MessageConnection {
  pageInfo: PageInfo;
  edges: MessageEdge[];
}

export interface MessageConnectionPromise
  extends Promise<MessageConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<MessageEdge>>() => T;
  aggregate: <T = AggregateMessagePromise>() => T;
}

export interface MessageConnectionSubscription
  extends Promise<AsyncIterator<MessageConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<MessageEdgeSubscription>>>() => T;
  aggregate: <T = AggregateMessageSubscription>() => T;
}

export interface UserPreviousValues {
  id: ID_Output;
  username: String;
  password: String;
  email: String;
}

export interface UserPreviousValuesPromise
  extends Promise<UserPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  username: () => Promise<String>;
  password: () => Promise<String>;
  email: () => Promise<String>;
}

export interface UserPreviousValuesSubscription
  extends Promise<AsyncIterator<UserPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  username: () => Promise<AsyncIterator<String>>;
  password: () => Promise<AsyncIterator<String>>;
  email: () => Promise<AsyncIterator<String>>;
}

export interface AggregateFriend {
  count: Int;
}

export interface AggregateFriendPromise
  extends Promise<AggregateFriend>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateFriendSubscription
  extends Promise<AsyncIterator<AggregateFriend>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface ClubSubscriptionPayload {
  mutation: MutationType;
  node: Club;
  updatedFields: String[];
  previousValues: ClubPreviousValues;
}

export interface ClubSubscriptionPayloadPromise
  extends Promise<ClubSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = ClubPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = ClubPreviousValuesPromise>() => T;
}

export interface ClubSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<ClubSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = ClubSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = ClubPreviousValuesSubscription>() => T;
}

export interface FriendConnection {
  pageInfo: PageInfo;
  edges: FriendEdge[];
}

export interface FriendConnectionPromise
  extends Promise<FriendConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<FriendEdge>>() => T;
  aggregate: <T = AggregateFriendPromise>() => T;
}

export interface FriendConnectionSubscription
  extends Promise<AsyncIterator<FriendConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<FriendEdgeSubscription>>>() => T;
  aggregate: <T = AggregateFriendSubscription>() => T;
}

export interface ClubPreviousValues {
  id: ID_Output;
  name: String;
  email: String;
  city: String;
}

export interface ClubPreviousValuesPromise
  extends Promise<ClubPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<String>;
  email: () => Promise<String>;
  city: () => Promise<String>;
}

export interface ClubPreviousValuesSubscription
  extends Promise<AsyncIterator<ClubPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  name: () => Promise<AsyncIterator<String>>;
  email: () => Promise<AsyncIterator<String>>;
  city: () => Promise<AsyncIterator<String>>;
}

export interface UserClub {
  id: ID_Output;
  userID: ID_Output;
  clubID: ID_Output;
}

export interface UserClubPromise extends Promise<UserClub>, Fragmentable {
  id: () => Promise<ID_Output>;
  user: <T = UserPromise>() => T;
  userID: () => Promise<ID_Output>;
  club: <T = ClubPromise>() => T;
  clubID: () => Promise<ID_Output>;
}

export interface UserClubSubscription
  extends Promise<AsyncIterator<UserClub>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  user: <T = UserSubscription>() => T;
  userID: () => Promise<AsyncIterator<ID_Output>>;
  club: <T = ClubSubscription>() => T;
  clubID: () => Promise<AsyncIterator<ID_Output>>;
}

export interface UserClubNullablePromise
  extends Promise<UserClub | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  user: <T = UserPromise>() => T;
  userID: () => Promise<ID_Output>;
  club: <T = ClubPromise>() => T;
  clubID: () => Promise<ID_Output>;
}

export interface PageInfo {
  hasNextPage: Boolean;
  hasPreviousPage: Boolean;
  startCursor?: String;
  endCursor?: String;
}

export interface PageInfoPromise extends Promise<PageInfo>, Fragmentable {
  hasNextPage: () => Promise<Boolean>;
  hasPreviousPage: () => Promise<Boolean>;
  startCursor: () => Promise<String>;
  endCursor: () => Promise<String>;
}

export interface PageInfoSubscription
  extends Promise<AsyncIterator<PageInfo>>,
    Fragmentable {
  hasNextPage: () => Promise<AsyncIterator<Boolean>>;
  hasPreviousPage: () => Promise<AsyncIterator<Boolean>>;
  startCursor: () => Promise<AsyncIterator<String>>;
  endCursor: () => Promise<AsyncIterator<String>>;
}

export interface UserClubEdge {
  node: UserClub;
  cursor: String;
}

export interface UserClubEdgePromise
  extends Promise<UserClubEdge>,
    Fragmentable {
  node: <T = UserClubPromise>() => T;
  cursor: () => Promise<String>;
}

export interface UserClubEdgeSubscription
  extends Promise<AsyncIterator<UserClubEdge>>,
    Fragmentable {
  node: <T = UserClubSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface FriendSubscriptionPayload {
  mutation: MutationType;
  node: Friend;
  updatedFields: String[];
  previousValues: FriendPreviousValues;
}

export interface FriendSubscriptionPayloadPromise
  extends Promise<FriendSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = FriendPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = FriendPreviousValuesPromise>() => T;
}

export interface FriendSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<FriendSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = FriendSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = FriendPreviousValuesSubscription>() => T;
}

export interface UserConnection {
  pageInfo: PageInfo;
  edges: UserEdge[];
}

export interface UserConnectionPromise
  extends Promise<UserConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<UserEdge>>() => T;
  aggregate: <T = AggregateUserPromise>() => T;
}

export interface UserConnectionSubscription
  extends Promise<AsyncIterator<UserConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<UserEdgeSubscription>>>() => T;
  aggregate: <T = AggregateUserSubscription>() => T;
}

export interface FriendPreviousValues {
  id: ID_Output;
  user1ID: ID_Output;
  user2ID: ID_Output;
}

export interface FriendPreviousValuesPromise
  extends Promise<FriendPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  user1ID: () => Promise<ID_Output>;
  user2ID: () => Promise<ID_Output>;
}

export interface FriendPreviousValuesSubscription
  extends Promise<AsyncIterator<FriendPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  user1ID: () => Promise<AsyncIterator<ID_Output>>;
  user2ID: () => Promise<AsyncIterator<ID_Output>>;
}

export interface Message {
  id: ID_Output;
  message: String;
}

export interface MessagePromise extends Promise<Message>, Fragmentable {
  id: () => Promise<ID_Output>;
  user: <T = UserPromise>() => T;
  chatRoom: <T = ChatRoomPromise>() => T;
  message: () => Promise<String>;
}

export interface MessageSubscription
  extends Promise<AsyncIterator<Message>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  user: <T = UserSubscription>() => T;
  chatRoom: <T = ChatRoomSubscription>() => T;
  message: () => Promise<AsyncIterator<String>>;
}

export interface MessageNullablePromise
  extends Promise<Message | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  user: <T = UserPromise>() => T;
  chatRoom: <T = ChatRoomPromise>() => T;
  message: () => Promise<String>;
}

export interface AggregateClub {
  count: Int;
}

export interface AggregateClubPromise
  extends Promise<AggregateClub>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateClubSubscription
  extends Promise<AsyncIterator<AggregateClub>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface Friend {
  id: ID_Output;
  user1ID: ID_Output;
  user2ID: ID_Output;
}

export interface FriendPromise extends Promise<Friend>, Fragmentable {
  id: () => Promise<ID_Output>;
  user1: <T = UserPromise>() => T;
  user1ID: () => Promise<ID_Output>;
  user2: <T = UserPromise>() => T;
  user2ID: () => Promise<ID_Output>;
}

export interface FriendSubscription
  extends Promise<AsyncIterator<Friend>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  user1: <T = UserSubscription>() => T;
  user1ID: () => Promise<AsyncIterator<ID_Output>>;
  user2: <T = UserSubscription>() => T;
  user2ID: () => Promise<AsyncIterator<ID_Output>>;
}

export interface FriendNullablePromise
  extends Promise<Friend | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  user1: <T = UserPromise>() => T;
  user1ID: () => Promise<ID_Output>;
  user2: <T = UserPromise>() => T;
  user2ID: () => Promise<ID_Output>;
}

export interface MessagePreviousValues {
  id: ID_Output;
  message: String;
}

export interface MessagePreviousValuesPromise
  extends Promise<MessagePreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  message: () => Promise<String>;
}

export interface MessagePreviousValuesSubscription
  extends Promise<AsyncIterator<MessagePreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  message: () => Promise<AsyncIterator<String>>;
}

export interface MessageSubscriptionPayload {
  mutation: MutationType;
  node: Message;
  updatedFields: String[];
  previousValues: MessagePreviousValues;
}

export interface MessageSubscriptionPayloadPromise
  extends Promise<MessageSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = MessagePromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = MessagePreviousValuesPromise>() => T;
}

export interface MessageSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<MessageSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = MessageSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = MessagePreviousValuesSubscription>() => T;
}

export interface ChatRoomConnection {
  pageInfo: PageInfo;
  edges: ChatRoomEdge[];
}

export interface ChatRoomConnectionPromise
  extends Promise<ChatRoomConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<ChatRoomEdge>>() => T;
  aggregate: <T = AggregateChatRoomPromise>() => T;
}

export interface ChatRoomConnectionSubscription
  extends Promise<AsyncIterator<ChatRoomConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<ChatRoomEdgeSubscription>>>() => T;
  aggregate: <T = AggregateChatRoomSubscription>() => T;
}

export interface Club {
  id: ID_Output;
  name: String;
  email: String;
  city: String;
}

export interface ClubPromise extends Promise<Club>, Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<String>;
  userClub: <T = FragmentableArray<UserClub>>(args?: {
    where?: UserClubWhereInput;
    orderBy?: UserClubOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  email: () => Promise<String>;
  city: () => Promise<String>;
}

export interface ClubSubscription
  extends Promise<AsyncIterator<Club>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  name: () => Promise<AsyncIterator<String>>;
  userClub: <T = Promise<AsyncIterator<UserClubSubscription>>>(args?: {
    where?: UserClubWhereInput;
    orderBy?: UserClubOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  email: () => Promise<AsyncIterator<String>>;
  city: () => Promise<AsyncIterator<String>>;
}

export interface ClubNullablePromise
  extends Promise<Club | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<String>;
  userClub: <T = FragmentableArray<UserClub>>(args?: {
    where?: UserClubWhereInput;
    orderBy?: UserClubOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  email: () => Promise<String>;
  city: () => Promise<String>;
}

export interface FriendEdge {
  node: Friend;
  cursor: String;
}

export interface FriendEdgePromise extends Promise<FriendEdge>, Fragmentable {
  node: <T = FriendPromise>() => T;
  cursor: () => Promise<String>;
}

export interface FriendEdgeSubscription
  extends Promise<AsyncIterator<FriendEdge>>,
    Fragmentable {
  node: <T = FriendSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface MessageEdge {
  node: Message;
  cursor: String;
}

export interface MessageEdgePromise extends Promise<MessageEdge>, Fragmentable {
  node: <T = MessagePromise>() => T;
  cursor: () => Promise<String>;
}

export interface MessageEdgeSubscription
  extends Promise<AsyncIterator<MessageEdge>>,
    Fragmentable {
  node: <T = MessageSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateUser {
  count: Int;
}

export interface AggregateUserPromise
  extends Promise<AggregateUser>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateUserSubscription
  extends Promise<AsyncIterator<AggregateUser>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

/*
The `String` scalar type represents textual data, represented as UTF-8 character sequences. The String type is most often used by GraphQL to represent free-form human-readable text.
*/
export type String = string;

export type Long = string;

/*
The `Int` scalar type represents non-fractional signed whole numeric values. Int can represent values between -(2^31) and 2^31 - 1.
*/
export type Int = number;

/*
The `ID` scalar type represents a unique identifier, often used to refetch an object or as key for a cache. The ID type appears in a JSON response as a String; however, it is not intended to be human-readable. When expected as an input type, any string (such as `"4"`) or integer (such as `4`) input value will be accepted as an ID.
*/
export type ID_Input = string | number;
export type ID_Output = string;

/*
The `Boolean` scalar type represents `true` or `false`.
*/
export type Boolean = boolean;

/**
 * Model Metadata
 */

export const models: Model[] = [
  {
    name: "User",
    embedded: false
  },
  {
    name: "Club",
    embedded: false
  },
  {
    name: "UserClub",
    embedded: false
  },
  {
    name: "Friend",
    embedded: false
  },
  {
    name: "ChatRoom",
    embedded: false
  },
  {
    name: "Message",
    embedded: false
  }
];

/**
 * Type Defs
 */

export const prisma: Prisma;
